AWSTemplateFormatVersion: 2010-09-09

Description: Generic CloudFormation Template

Parameters:
  ProjectName:
    Type: String
    Description: Shorthand name for the project to show in the console and logs.
  EntityName:
    Type: String
    Description: The name of the Company or Entity. Should be all lowercase.
  DevelopmentStage:
    Type: String
    AllowedValues:
      - development
      - staging
      - production
      - demonstration
    Description: Usually development, demonstration, staging, or production.
  Image:
    Type: String
    Description: Docker image to run.
  ApexDomain:
    Type: String
    Description: Domain name to place this application under as a subdomain.
  Subdomain:
    Type: String
    Description: Subdomain to deploy this app to.
  DataBucket:
    Type: String
    Description: Bucket for client data.
  CodeBucket:
    Type: String
    Description: Bucket for lambda code.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet Ids to run in. Comma seperated string.
    # The first 6 subnets are one per Availability Zone (AZ).
    # SubnetId[0] - Assigned to AWS::EC2::NatGateway and to the LoadBalancer to the ECS Cluster.
    # SubnetId[0..3] - Assigned to AWS::ElasticLoadBalancingV2::LoadBalancer.
    # SubnetId[4] - Assigned to AWS::EC2::SubnetRouteTableAssociation for Lambda's to access internal resoures including the RDS DB.
    # SubnetId[5] - Slated to be assigned to AWS::EC2::SubnetRouteTableAssociation for redundancy.
    # VPN put into its own subnet to prevent conflict.
  HTTPSCertificateArn:
    Type: String
    Description: AWS Certificate ARN.
  CodeBuildResolvedSourceVersion:
    Type: String
    Description: Unique ID per build from this pipeline.

Conditions:
  IsProduction: !Equals [ !Ref "DevelopmentStage", "production" ]

Resources:

  #
  # ECS Cluster
  #

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: {}

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  TaskPolicy:
    # Allow our container to only access the AWS resources it needs.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-TaskPolicy'
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Allow the task to forward to Cloudwatch logs. (Anything we send to stdout or stderr will go there.)
          - Effect: Allow
            Action:
              - logs:*
            Resource: !GetAtt LogGroup.Arn
          # Allow access to ECS Secrets Manager.
          - Effect: Allow
            Action:
              - kms:Decrypt
              - secretsmanager:GetSecretValue
            Resource:
              - !Join [ ":", ["arn:aws:secretsmanager", !Ref "AWS::Region", !Ref "AWS::AccountId", "secret", "appUser-??????"]]
              - !Join [ ":", ["arn:aws:secretsmanager", !Ref "AWS::Region", !Ref "AWS::AccountId", "secret", "appDBUser-??????"]]
              - !Join [ ":", ["arn:aws:secretsmanager", !Ref "AWS::Region", !Ref "AWS::AccountId", "secret", "jwt-rs256-??????"]]
          # Allow server to send "recovery" email.
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"

  # Create a place for logs to go.
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  # Resources we need for our Task to execute
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      # Use DependsOn here to insure the policy exists so it can be attached to the role.
      - TaskPolicy
    Properties:
      # 256 is 25% of a 'vCPU', the smallest amount we can allocate.
      Cpu: !If [IsProduction, 512, 256]
      # 512MB is the smallest amount we can allocate.
      # Size combinations https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html
      Memory: !If [IsProduction, 1024, 512]
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: bridge
#      # These next two properties are the only Fargate specific configuration in the TaskDefinition.
#      # It forces an 'awsvpc' network mode.
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
      ContainerDefinitions:
        - Name: !Ref ProjectName
          Cpu: !If [IsProduction, 512, 256]
          Memory: !If [IsProduction, 1024, 512]
          PortMappings:
            - ContainerPort: 10025
          Essential: true
          Image: !Ref Image
          LogConfiguration:
            # Tell ECS to send log output to Cloudwatch. The prefix is required by Fargate.
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProjectName

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      # - InternalTargetGroup
      - AppSG
      - TaskDefinition
      - LBListener
    Properties:
      Cluster: !Ref ECSCluster
#      LaunchType: FARGATE
      # The number of instances we would like to run.
      DesiredCount: !If [IsProduction, 2, 1]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ProjectName
          ContainerPort: 10025
          TargetGroupArn: !Ref TargetGroup
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: ENABLED
#          Subnets:
#            - !Select [ 0, !Ref SubnetIds ]
#            - !Select [ 1, !Ref SubnetIds ]
#            - !Select [ 2, !Ref SubnetIds ]
#            - !Select [ 3, !Ref SubnetIds ]
#          SecurityGroups:
#            - !Ref AppSG
      # Optional
      DeploymentConfiguration:
        # Never allow less than this percentage of servers to be running during a deploy.
        MinimumHealthyPercent: 100
        # Allow six times the number of servers to be running during a deployment.
        MaximumPercent: 600

  # Whitelist traffic from the internet to the load balancer.
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref ProjectName
      GroupDescription: Load balancer security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          CidrIp: '0.0.0.0/0'
          FromPort: 25
          ToPort: 25
#        - IpProtocol: 'tcp'
#          CidrIp: '0.0.0.0/0'
#          FromPort: 443
#          ToPort: 443

  # Security group on the inside for the application.
  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #      GroupName: !Ref ProjectName
      GroupDescription: Application security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          SourceSecurityGroupId: !Ref LoadBalancerSG
          FromPort: 1
          ToPort: 65000

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    DependsOn:
#      - LoadBalancerSG
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Select [ 1, !Ref SubnetIds ]
        - !Select [ 3, !Ref SubnetIds ]
        # - !Select [ 4, !Ref SubnetIds ]
        # - !Select [ 5, !Ref SubnetIds ]
#      LoadBalancerAttributes:
#        - Key: idle_timeout.timeout_seconds
#          Value: '900'    # Maximum lambda function time.
#      SecurityGroups:
#        - !Ref LoadBalancerSG
      Type: network

  # Port 443 Listener. Default rule is to forward to the Target Group
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 25
      Protocol: TCP
#      Certificates:
#        - CertificateArn: !Ref HTTPSCertificateArn

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
#      # Default is 'instance' but must use 'ip' to forward to fargate.`
#      TargetType: ip
      VpcId: !Ref VpcId
      Protocol: TCP
      Port: 25
      TargetGroupAttributes:
        - Key:  deregistration_delay.timeout_seconds
          Value:  30

Outputs:
  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
